/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ (() => {

eval("function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/*require('./bootstrap');*/\ndocument.addEventListener(\"click\", documentActions);\ndocument.addEventListener(\"keyup\", documentActions);\n\nfunction isJson(str) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction documentActions(e) {\n  var targetElement = e.target;\n\n  if (targetElement.closest('[data-btn=\"edit\"]')) {\n    var curTd = targetElement.parentElement;\n    var tr = curTd.parentElement;\n    var childs = tr.children;\n    var headerTable = document.querySelector(\"[data-headers]\").children;\n    var editFields = {};\n    Array.prototype.forEach.call(headerTable, function (el, i) {\n      if (el.closest('[data-edit-col]')) {\n        editFields[i] = {\n          name: el.getAttribute(\"data-edit-col\"),\n          type: el.getAttribute(\"data-edit-type\")\n        };\n\n        if (editFields[i].type == \"select\") {\n          editFields[i].target = el.getAttribute(\"data-edit-target\");\n        }\n      }\n    });\n    Array.prototype.forEach.call(childs, function (child, i) {\n      if (editFields.hasOwnProperty(i)) {\n        switch (editFields[i].type) {\n          case \"input\":\n            var value = child.innerText;\n            child.innerText = \"\";\n            var inp = document.createElement(\"input\");\n            inp.name = editFields[i].name;\n            inp.value = value;\n            inp.setAttribute(\"data-value\", value);\n            child.append(inp);\n            break;\n\n          case \"select\":\n            var list = child.querySelectorAll(\"ul li\");\n            var listValue = {};\n            Array.from(list).map(function (elem) {\n              listValue[elem.getAttribute(\"data-id\")] = elem.innerText;\n            }, listValue);\n            child.innerHTML = \"\";\n            var teamplate = document.querySelector(\"#\" + editFields[i].target);\n            var selectClone = teamplate.content.cloneNode(true);\n            Array.from(selectClone.querySelectorAll(\"option\")).map(function (opt) {\n              if (listValue.hasOwnProperty(opt.value)) {\n                opt.selected = true;\n              }\n            }, listValue);\n            var select = selectClone.querySelector(\"select\");\n            select.setAttribute(\"data-value\", JSON.stringify(listValue));\n            select.name = editFields[i].name;\n            child.append(select);\n            break;\n        }\n      }\n    });\n    curTd.innerHTML = \"\";\n    var btnSave = document.createElement(\"input\");\n    var btnAbort = document.createElement(\"input\");\n    btnSave.type = \"button\";\n    btnAbort.type = \"button\";\n    btnSave.value = \"✔\";\n    btnAbort.value = \"✖\";\n    btnSave.setAttribute(\"data-btn\", \"save\");\n    btnAbort.setAttribute(\"data-btn\", \"abort\");\n    curTd.append(btnSave);\n    curTd.append(btnAbort);\n  }\n\n  if (targetElement.closest('[data-btn=\"abort\"]')) {\n    var _curTd = targetElement.parentElement;\n    var _tr = _curTd.parentElement;\n    var _childs = _tr.children;\n    Array.prototype.forEach.call(_childs, function (el, i) {\n      var childsEl = el.children;\n\n      if (!childsEl.length) {\n        return;\n      }\n\n      var childEdit = false;\n\n      for (var j = 0; j < childsEl.length; j++) {\n        if (childsEl[j].tagName == \"INPUT\" && childsEl[j].type == \"text\" || childsEl[j].tagName == \"SELECT\") {\n          childEdit = childsEl[j];\n        }\n      }\n\n      if (childEdit) {\n        var value = childEdit.getAttribute(\"data-value\");\n\n        if (isJson(value)) {\n          value = JSON.parse(value);\n          var ul = document.createElement(\"ul\");\n          var li;\n\n          for (var _i = 0, _Object$entries = Object.entries(value); _i < _Object$entries.length; _i++) {\n            var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n                key = _Object$entries$_i[0],\n                val = _Object$entries$_i[1];\n\n            li = document.createElement(\"li\");\n            li.setAttribute(\"data-id\", key);\n            li.innerText = val;\n            ul.append(li);\n          }\n\n          el.innerHTML = \"\";\n          el.append(ul);\n        } else {\n          childEdit.remove();\n          el.innerText = value;\n        }\n      }\n    });\n    _curTd.innerHTML = \"\";\n    var btnEdit = document.createElement(\"input\");\n    btnEdit.type = \"button\";\n    btnEdit.value = \"✎\";\n    btnEdit.setAttribute(\"data-btn\", \"edit\");\n\n    _curTd.append(btnEdit);\n  }\n\n  if (targetElement.closest('[data-btn=\"save\"]')) {\n    var _curTd2 = targetElement.parentElement;\n    var _tr2 = _curTd2.parentElement;\n    var _childs2 = _tr2.children;\n    var data = {};\n    Array.prototype.forEach.call(_childs2, function (el, i) {\n      var childsEl = el.children;\n\n      if (!childsEl.length) {\n        return;\n      }\n\n      var childInput = false;\n\n      for (var j = 0; j < childsEl.length; j++) {\n        if (childsEl[j].tagName == \"INPUT\" && childsEl[j].type == \"text\") {\n          data[childsEl[j].name] = childsEl[j].value;\n        }\n\n        if (childsEl[j].tagName == \"SELECT\") {\n          var selected = el.querySelectorAll('option:checked');\n          data[childsEl[j].name] = Array.from(selected).map(function (el) {\n            return el.value;\n          });\n        }\n\n        if (childsEl[j].tagName == \"INPUT\" && childsEl[j].type == \"checkbox\") {\n          data.id = childsEl[j].value;\n        }\n      }\n    });\n\n    if (Object.keys(data).length != 0) {\n      fetch(document.location.origin + document.location.pathname + \"/edit\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8',\n          'X-CSRF-Token': document.head.querySelector('meta[name=\"csrf-token\"]').content\n        },\n        body: JSON.stringify(data)\n      }).then(function (res) {\n        return res.json();\n      }).then(function (res) {\n        if (res.error) {\n          console.log(\"Error: \" + res.error);\n        } else {\n          Array.prototype.forEach.call(_childs2, function (el, i) {\n            var childsEl = el.children;\n\n            if (!childsEl.length) {\n              return;\n            }\n\n            var childInput = false;\n\n            for (var j = 0; j < childsEl.length; j++) {\n              (function () {\n                switch (childsEl[j].tagName) {\n                  case \"INPUT\":\n                    if (childsEl[j].type == \"text\") {\n                      var value = childsEl[j].value;\n                      childsEl[j].remove();\n                      el.innerText = value;\n                    }\n\n                    break;\n\n                  case \"SELECT\":\n                    var selected = childsEl[j].querySelectorAll(\"option:checked\");\n                    var ul = document.createElement(\"ul\");\n                    Array.from(selected).map(function (opt) {\n                      var li = document.createElement(\"li\");\n                      li.setAttribute(\"data-id\", opt.value);\n                      li.innerText = opt.innerText;\n                      ul.append(li);\n                    }, ul);\n                    el.innerHTML = \"\";\n                    el.append(ul);\n                    break;\n                }\n              })();\n            }\n\n            if (childInput) {\n              var value = childInput.value;\n              childInput.remove();\n              el.innerText = value;\n            }\n          });\n          _curTd2.innerHTML = \"\";\n\n          var _btnEdit = document.createElement(\"input\");\n\n          _btnEdit.type = \"button\";\n          _btnEdit.value = \"✎\";\n\n          _btnEdit.setAttribute(\"data-btn\", \"edit\");\n\n          _curTd2.append(_btnEdit);\n        }\n      });\n    }\n  }\n\n  if (targetElement.closest('[data-btn=\"remove\"]')) {\n    var table = document.querySelector(\"table\");\n    var checkedElem = table.querySelectorAll(\"[data-checkbox]:checked\");\n    var delElem = Array.from(checkedElem).map(function (el) {\n      return el.value;\n    });\n    fetch(document.location.origin + document.location.pathname + \"/delete\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8',\n        'X-CSRF-Token': document.head.querySelector('meta[name=\"csrf-token\"]').content\n      },\n      body: JSON.stringify(delElem)\n    }).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      if (res.error || res.status == \"error\") {\n        console.log(\"Error: \" + res.message);\n      } else {\n        location.reload();\n      }\n    });\n  }\n\n  if (targetElement.closest('[data-btn=\"newElem\"]')) {\n    var _table = document.querySelector(\"table\");\n\n    if (!_table.querySelector('[data-new-elem]')) {\n      var template = document.querySelector(\"#addElement\");\n      var newTr = template.content.cloneNode(true);\n      newTr.querySelector(\"tr\").setAttribute(\"data-new-elem\", \"\");\n\n      _table.querySelector(\"tbody\").prepend(newTr);\n    }\n  }\n\n  if (targetElement.closest('[data-btn=\"decline\"]')) {\n    var _table2 = document.querySelector(\"table\");\n\n    _table2.querySelector('[data-new-elem]').remove();\n  }\n\n  if (targetElement.closest('[data-btn=\"add\"]')) {\n    var _curTd3 = targetElement.parentElement;\n    var _tr3 = _curTd3.parentElement;\n    var _childs3 = _tr3.children;\n    var _data = {};\n    Array.prototype.forEach.call(_childs3, function (el, i) {\n      var childsEl = el.children;\n\n      if (!childsEl.length) {\n        return;\n      }\n\n      var childInput = false;\n\n      for (var j = 0; j < childsEl.length; j++) {\n        if (childsEl[j].tagName == \"INPUT\" && childsEl[j].type == \"text\") {\n          _data[childsEl[j].name] = childsEl[j].value;\n        }\n\n        if (childsEl[j].tagName == \"SELECT\") {\n          var selected = el.querySelectorAll('option:checked');\n          _data[childsEl[j].name] = Array.from(selected).map(function (el) {\n            return el.value;\n          });\n        }\n\n        if (childsEl[j].tagName == \"INPUT\" && childsEl[j].type == \"checkbox\") {\n          _data.id = childsEl[j].value;\n        }\n      }\n    });\n\n    if (Object.keys(_data).length != 0) {\n      fetch(document.location.origin + document.location.pathname + \"/add\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8',\n          'X-CSRF-Token': document.head.querySelector('meta[name=\"csrf-token\"]').content\n        },\n        body: JSON.stringify(_data)\n      }).then(function (res) {\n        return res.json();\n      }).then(function (res) {\n        if (res.error) {\n          console.log(\"Error: \" + res.error);\n        } else {\n          location.reload();\n        }\n      });\n    }\n  }\n\n  if (targetElement.closest('[data-btn=\"filterElem\"]')) {\n    var searchElem = document.querySelector('.findElem');\n\n    if (searchElem.style.display == \"none\") {\n      searchElem.style.display = \"\";\n    } else {\n      searchElem.value = \"\"; // searchElem.dispatchEvent(new KeyboardEvent(\"keyup\",{\"key\": \"Backspace\"}));\n\n      var _table3 = document.querySelector('table');\n\n      for (var i = 1; i < _table3.rows.length; i++) {\n        _table3.rows[i].style.display = \"\";\n      }\n\n      searchElem.style.display = \"none\";\n    }\n  }\n\n  if (targetElement.closest('[data-select-all]')) {\n    var status = targetElement.checked;\n    var listCheckbox = document.querySelectorAll(\"[data-checkbox]\");\n    Array.from(listCheckbox).map(function (el) {\n      return el.checked = status;\n    });\n  }\n\n  if (targetElement.closest(\"[type='checkbox']\")) {\n    var _status = true;\n    var allCheckbox = document.querySelector(\"[data-select-all]\");\n    var listCheckBox = document.querySelectorAll(\"[data-checkbox]\");\n    Array.from(listCheckBox).map(function (el) {\n      if (!el.checked) {\n        _status = false;\n      }\n    }, _status);\n    allCheckbox.checked = _status;\n  }\n\n  if (e.type == \"keyup\" && targetElement.closest(\".findElem\")) {\n    console.log(e);\n    var phrase = document.querySelector('.findElem');\n\n    var _table4 = document.querySelector('table');\n\n    var regPhrase = new RegExp(phrase.value, 'i');\n    var flag = false;\n\n    for (var _i2 = 1; _i2 < _table4.rows.length; _i2++) {\n      flag = false;\n\n      for (var j = _table4.rows[_i2].cells.length - 1; j >= 0; j--) {\n        flag = regPhrase.test(_table4.rows[_i2].cells[j].innerHTML);\n        if (flag) break;\n      }\n\n      if (flag) {\n        _table4.rows[_i2].style.display = \"\";\n      } else {\n        _table4.rows[_i2].style.display = \"none\";\n      }\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/app.js\n");

/***/ }),

/***/ "./resources/sass/app.scss":
/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcz9hODBiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/sass/app.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/app": 0,
/******/ 			"css/app": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/js/app.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/sass/app.scss")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;